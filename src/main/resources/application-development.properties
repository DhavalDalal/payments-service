######################################################
# Server Configuration
######################################################
server.port = 9000
fraud-checker.service.url = http://localhost
fraud-checker.service.port = 9001
spring.devtools.restart.exclude = static/**,templates/**,custom/**

# valid values are: always, never, on_param
server.error.include-stacktrace = never
server.error.whitelabel.enabled = false
server.error.path = /error

######################################################
# Feature Flags/Options
######################################################
# Select Latency Control Pattern, valid values for below are "retry", "circuit_breaker"
# Leaving empty or not specifying the property defaults to No Latency Control
features.resiliency.latency_control.strategy =
#features.resiliency.latency_control.strategy = retry
#features.resiliency.latency_control.strategy = circuit_breaker

######################################################
# Timeout
######################################################
latency_control.timeout.connect = 3000
latency_control.timeout.read = 3000

######################################################
# Retry - Uniform Backoff Policy
######################################################
latency_control.retry.maxAttempts = 2
latency_control.retry.backoff.delay = 100
latency_control.retry.backoff.maxDelay = 500

###############################################################
# Retry - Exponential BackOff Policy, use additionally to above
###############################################################
#latency_control.retry.backoff.multiplier = 1.5

######################################################
# Circuit Breaker Config
######################################################
latency_control.circuit_breaker.maxAttempts = 3
latency_control.circuit_breaker.openTimeout = 15000
latency_control.circuit_breaker.resetTimeout = 30000

######################################################
# Datasource Config
######################################################
spring.jpa.database = H2
spring.jpa.show-sql = true
# We will use in-memory DB for running tests
# 1. The schema name PAYMENTS is case-sensitive in H2 url and
# spring.datasource.url = jdbc:h2:mem:paymentsdb;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS PAYMENTS;

# 2. also use @TestPropertySource(properties = {
#        // use memory instead of file.
#        "spring.datasource.url = jdbc:h2:mem:paymentsdb;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS PAYMENTS;"
#})
# in the Integration tests.

# By design, the in-memory database is volatile, and it is ok for running tests
# whereas for running application in development mode the data will be lost when we
# restart the application.  So, we need to run H2 like a regular database, where data
# is not lost across restarts.  So, in order to run it like regular database, we need
# to change that behavior by using file-based storage.  Generally, to debug a test the
# file-based storage can be helpful.
#
# To do this we need to use (schema name PAYMENTS is case-sensitive in H2):
# spring.datasource.url = jdbc:h2:file:./database/paymentsdb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS PAYMENTS;

# In memory URL
#spring.datasource.url = jdbc:h2:mem:paymentsdb;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS PAYMENTS;

# File URL
spring.datasource.url = jdbc:h2:file:./database/paymentsdb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS PAYMENTS;
# File URL, using IFEXISTS=TRUE will not create it
#spring.datasource.url = jdbc:h2:file:./database/paymentsdb;DB_CLOSE_ON_EXIT=FALSE;IFEXISTS=TRUE;DB_CLOSE_DELAY=-1;
spring.datasource.driverClassName = org.h2.Driver
spring.datasource.username = sa
spring.datasource.password =
spring.jpa.database-platform = org.hibernate.dialect.H2Dialect
#spring.jpa.open-in-view = false

######################################################
# Enable H2 Console Access
######################################################
# H2 database has an embedded GUI console for browsing the contents of a database
# and running SQL queries. By default, the H2 console is not enabled in Spring.
# To enable it, we need to add the following property to application.properties:
spring.h2.console.enabled = true

# The H2 console can be accessed on port 9000
# http://localhost:9000/h2-console
# Use the above url in the connection string
spring.h2.console.path=/h2-console

# Hibernate ddl auto (create, create-drop, validate, update)
# Interpretation:
# validate: validate the schema, makes no changes to the database.
# update: update the schema.
# create: creates the schema, destroying previous data.
# create-drop: drop the schema when the SessionFactory is closed explicitly, typically when the application is stopped.
# none: does nothing with the schema, makes no changes to the database
#
# NOTE: if you wish to use Hibernate to create schema in test, use create-drop
# spring.jpa.hibernate.ddl-auto = create-drop

# NOTE: For JPA based apps, you can choose to have Hibernate create the schema or
# use schema.sql (it contains all the DDL statements) or flyway to manage schema,
# but not both.  When using schema.sql, be sure to disable
# spring.jpa.hibernate.ddl-auto by setting it to none.
spring.jpa.hibernate.ddl-auto = none

# NOTE: we don't need flyway for tests, as we let hibernate create the schema for us.
spring.flyway.enabled = true

# In our case it is schema_version
# put your custom table name  (default is flyway_schema_history).
spring.flyway.table = schema_version
# schema name is case-sensitive in H2
spring.flyway.schemas = PAYMENTS

#
# If you want to spin up a new DB instance in another environment, Flyway can do it
# for you in a breeze. At application startup, it tries to establish a connection to
# the database. It will throw an error if it is not able to.
#
# It helps you evolve your database schema easily and is reliable in all instances.
# There is no need to execute the database scripts manually.

# Every time the need to upgrade the database arises, whether it is the schema
# (DDL) or reference data (DML), you can simply create a new migration script
# with a version number higher than the current one. When Flyway starts, it will
# find the new script and upgrade the database accordingly.

# Flyway scans the file system and sorts them based on their version number.
# Flyway creates a table name 'schema_version' in your database.
# This table is responsible for tracking the state of the database and keeps an
# explicit record for the various SQL scripts that have been executed.
# As each migration gets applied, the schema history table is updated.
# Since we were trying to make schema changes by introducing Flyway on an already
# existing database containing a table, it threw an application error.
# There is no existing 'schema_version' table in the database, hence Flyway
# was not able to track the state of the database and execute the correct
# SQL scripts from the application repository.

# However, if there was no existing database and we were building the schema from
# scratch for the first time, this would not have been a problem.
# Flyway would have successfully created the database and executed the schema changes.
#
# If your application is already running in production, dropping the table,
# letting Flyway recreate the new table and the 'schema-version' table,
# and populating the data in the existing table is not possible.

# To intimate Flyway that it is dealing with a database with existing tables. You can do
# that by explicitly setting the flyway baseline-on-migrate property to True
spring.flyway.baseline-on-migrate = true